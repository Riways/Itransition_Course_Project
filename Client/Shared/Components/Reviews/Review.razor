@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims;
@using totten_romatoes.Client.Shared.Components.Localization

<MudPaper   Width="100%" Outlined="true" >
    <MudGrid Spacing="0">
        <MudItem Class="px-6 py-4" xs="12" id="reviewHeader">
            <MudGrid>
                <MudItem Class="d-flex align-content-center flex-wrap" xs="12" md="6">
                    <MudAvatar   Variant="Variant.Outlined" Color="@RandomColorPick()">@(@CurrentReview.Author.UserName.First())</MudAvatar>
                        <MudText Class="d-flex align-content-center flex-wrap mx-2" Typo="Typo.h6" >
                        @CurrentReview.Author.UserName  
                    </MudText >
                    <MudText  Class="d-flex align-content-center flex-wrap pt-1" Typo="Typo.body2" >
                            @CurrentReview.DateOfCreationInUTC.ToLocalTime().ToString("dd MMM yyy HH':'mm")
                    </MudText>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudText  Class="d-flex flex-1 flex-wrap justify-end" Typo="Typo.h6">
                        <MudLink Typo="Typo.h6" Class="pr-1" Href="/">@CurrentReview.Subject.Name</MudLink>
                        (
                        <MudIcon Class="pt-1" Icon="@Icons.Filled.Star" Color="Color.Warning" Size="Size.Medium"/>
                        @(_subjectRating == double.MinValue ? "--" : _subjectRating) )
                    </MudText>
                    <AuthorizeView>
                        <Authorized>
                            @if (_userGrade == 0)
                            {
                                <MudRating  SelectedValueChanged="UserRatedSubjectHandler" Class="d-flex justify-end"  />
                            }
                            else
                            {
                                <MudRating  SelectedValue="_userGrade" ReadOnly="true" Class="d-flex justify-end"  />
                            }
                        </Authorized>
                        <NotAuthorized>
                            <MudRating Disabled="true" Class="d-flex justify-end" />
                        </NotAuthorized>
                    </AuthorizeView>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudDivider />
        </MudItem>
        <MudItem Class="px-6 py-4" xs="12">
            <MudText Typo="Typo.h4" >
                @CurrentReview.Title
            </MudText>
        </MudItem>
        @if (CurrentReview.ReviewImage != null)
        {
            <MudItem Class="px-6 " xs="12">
                <MudImage Src="@CurrentReview.ReviewImage.ImageUrl" Width="100"/>
            </MudItem>
        }
        @if (IsReviewWrapped)
        {
            <MudItem Class="px-6 pt-4" Style="height:7rem; overflow:hidden"  xs="12" id="reviewBody">
            @((MarkupString)CurrentReview.ReviewBody)
            </MudItem>
            <MudItem Class="mt-n4 pt-4 px-6" xs="12" >
                <MudDivider Class="mb-4"></MudDivider>
                <MudButton Variant="Variant.Outlined" OnClick="ReadFullReview" Size="Size.Medium"  Color="Color.Transparent">@_loc["Read"]</MudButton>
            </MudItem>
        }
        else
        {
            <MudItem Class="px-6 pt-4" xs="12" id="reviewBody">
            @((MarkupString)CurrentReview.ReviewBody)
                <MudRating Class="d-flex flex-grow-1 justify-end mt-2" ReadOnly="true" SelectedValue="@CurrentReview.AuthorGrade" Size="Size.Medium" MaxValue="10" />
            </MudItem>
        }
        @if (CurrentReview.Tags != null)
        {
            <MudItem Class="px-6 py-4" xs="12">
            @foreach (var tag in CurrentReview.Tags)
            {
                <MudChip Size="Size.Small">@tag.Name</MudChip>
            }
            </MudItem>
        }
        <MudItem Class="px-6" xs="12">
            <MudButton Variant="Variant.Outlined" OnClick="DeleteReview" Color="Color.Error">DELETE</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudDivider />
        </MudItem>
        <MudItem Class="px-6 py-4 " xs="12">
            <MudGrid>
                <MudItem Class="d-flex align-content-center flex-wrap" xs="6" sm="9">
                    <MudIcon Icon="@Icons.Outlined.Comment" Size="Size.Medium" /> 
                    @if(CurrentReview.Comments == null)
                    {
                        <MudLink Class="pl-1" Href="@($"/review/{CurrentReview.Id}")" Typo="Typo.body2">(@CurrentReview.CommentsAmount)</MudLink> 
                    }
                    else
                    {
                        <MudLink Class="pl-1" Href="@($"/review/{CurrentReview.Id}")" Typo="Typo.body2">(@CurrentReview.Comments.Count)</MudLink> 
                    }
                </MudItem>
                <MudItem Class="d-flex flex-grow-1"  xs="6" sm="3">
                    <MudText Class="d-flex flex-1 justify-end" Typo="Typo.body2" >
                        @_loc["Category:"] 
                    </MudText>
                    <MudLink Class="pl-1" Href="/" Typo="Typo.body2"> @_sharedLoc[CurrentReview.ReviewCategory.ToString()]</MudLink>  
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudPaper>
@code {
    [Parameter]
    public ReviewModel CurrentReview { get; set; }
    [Parameter]
    public AuthenticationStateProvider? AuthStateProvider { get; set; }
    [Parameter]
    public EventCallback<long> DeleteReviewFromList { get; set; }
    [Parameter]
    public bool IsReviewWrapped { get; set; }
    [Inject]
    private HttpClient? _httpClient { get; set; }
    [Inject]
    private IStringLocalizer<Review> _loc { get; set; }
    [Inject]
    private IStringLocalizer<SharedLocalization> _sharedLoc { get; set; }
    [Inject]
    private NavigationManager _nav { get; set; }
    private string _userId;
    private double _subjectRating = double.MinValue;
    private int _userGrade { get; set; } = 0;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _userId = user.FindFirstValue("sub");
            var userGrade = CurrentReview.Subject.Grades.FirstOrDefault(g => g.AuthorId == _userId);
            if (userGrade != null)
                _userGrade = userGrade.Value;
        }
        CalculateSubjectRating();
    }

    public async Task UserRatedSubjectHandler(int value)
    {
        _userGrade = value;
        GradeModel newGrade = new();
        newGrade.Value = value;
        newGrade.SubjectId = CurrentReview.SubjectId;
        newGrade.AuthorId = _userId;
        await _httpClient.PostAsJsonAsync<GradeModel>(Constants.SUBJECT_GRADE_URL, newGrade);
        CurrentReview.Subject.Grades.Add(newGrade);
        CalculateSubjectRating();
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirstValue("sub");
    }

    private async Task DeleteReview()
    {
        await _httpClient.DeleteAsync($"{Constants.REVIEW_URL}/{CurrentReview.Id}");
        DeleteReviewFromList.InvokeAsync(CurrentReview.Id);
    }

    private Color RandomColorPick()
    {
        return (Color)Random.Shared.Next(0, 11);
    }

    private void CalculateSubjectRating()
    {
        if (CurrentReview.Subject.Grades != null && CurrentReview.Subject.Grades.Count > 0)
        {
            int gradesSum = CurrentReview.Subject.Grades.Select(g => g.Value).Sum();

            _subjectRating = Math.Round((double)gradesSum / CurrentReview.Subject.Grades.Count, 1);

        }
    }

    private void ReadFullReview()
    {
        _nav.NavigateTo($"review/{CurrentReview.Id}");
    } 

}
