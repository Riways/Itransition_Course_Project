@using Microsoft.AspNetCore.Components.Authorization;
<MudNavMenu>
    <MudAutocomplete @bind-Text="@_searchString"  Class="mb-6" T="ReviewModel" Variant="Variant.Filled" ValueChanged="@ReviewChosen"  Label="@_loc["Search review"]" ToStringFunc="@(e=> e==null?null : $"{e.Title} : {e.Subject.Name}")"  CoerceValue="true" SearchFunc="@Search1" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" ShowProgressIndicator="true"/>
    <MudNavLink Href="/" Match="NavLinkMatch.All">@_loc["Home"]</MudNavLink>
    <AuthorizeView>
        <Authorized>
            <MudNavLink Href="/create-review" Match="NavLinkMatch.Prefix">@_loc["Create review"]</MudNavLink>
            <MudNavLink Href="/user-profile" Match="NavLinkMatch.Prefix">@_loc["My profile"]</MudNavLink>  
        </Authorized>
        <NotAuthorized>
            <MudNavLink Href="/create-review" Disabled="true" Match="NavLinkMatch.Prefix">@_loc["Create review"]</MudNavLink>
            <MudNavLink Href="/user-page" Disabled="true" Match="NavLinkMatch.Prefix">@_loc["My profile"]</MudNavLink>  
        </NotAuthorized>
    </AuthorizeView>
      

</MudNavMenu>

@code {
    [Inject]
    private IHttpClientFactory _clientFactory { get; set; }
    [Inject]
    private NavigationManager _nav { get; set; }
    [Inject]
    private IStringLocalizer<NavMenu> _loc { get; set; }
    [Parameter]
    public EventCallback<bool> DarkModeSetter { get; set; }
    private ReviewModel? _chosenReview { get; set; }
    private String? _searchString { get; set; }
    private bool _isDarkMode = false;

    public async Task<IEnumerable<ReviewModel>> Search1(string value)
    {
        if (value == null || value == string.Empty)
            return null;
        HttpClient _anonymousHttpClient = _clientFactory.CreateClient("totten_romatoes.AnonymousAPI");
        var response = await _anonymousHttpClient.GetFromJsonAsync<IEnumerable<ReviewModel>>($"{Constants.REVIEW_SEARCH_URL}/{value}");
        return response;
    }

    public async Task ReviewChosen(ReviewModel review)
    {
        _searchString = string.Empty;
        _nav.NavigateTo($"review/{review.Id}");
    }

    public async Task SetDarkMode(bool mode)
    {
        Console.WriteLine(mode);
        _isDarkMode = !_isDarkMode;
        await DarkModeSetter.InvokeAsync(_isDarkMode);
    }
}
