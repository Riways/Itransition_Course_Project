@page "/review/{id:long}"
@using totten_romatoes.Client.Shared.Components.Reviews
@using totten_romatoes.Client.Shared.Components.Comments
@using totten_romatoes.Client.Shared.Components.Tags
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>@_loc["Review"]</PageTitle>

<MudContainer Class="mt-1" MaxWidth="MaxWidth.Large">
    <MudGrid Spacing="6" Class="mt-1" Justify="Justify.Center">
        <MudItem xs="12" lg="9">
            @if(_currentReview == null)
            {
                <MudGrid Class="d-flex align-content-center flex-grow-1 flex-wrap justify-center"  Style="height:80vh">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </MudGrid>
            }else
            {
                <Review AuthStateProvider="_authStateProvider" CurrentReview="_currentReview" />
                <Comments AuthStateProvider="_authStateProvider" CurrentReview="_currentReview" />
            }
        </MudItem>
        <MudHidden Breakpoint="Breakpoint.MdAndDown"  >
            <MudItem  lg="3">
                <TagCloud/>
            </MudItem>
        </MudHidden>
    </MudGrid>
</MudContainer>



@code {
    [Parameter]
    public long? Id { get; set; }
    [Inject]
    private IHttpClientFactory? _clientFactory { get; set; }
    [Inject]
    private AuthenticationStateProvider? _authStateProvider { get; set; }
    [Inject]
    private IStringLocalizer<ReviewAndComments> _loc { get; set; }

    private ReviewModel? _currentReview { get; set; }

    protected async override Task OnParametersSetAsync()
    {
        HttpClient _anonymousHttpClient = _clientFactory!.CreateClient("totten_romatoes.AnonymousAPI");
        _currentReview = await _anonymousHttpClient.GetFromJsonAsync<ReviewModel>($"{Constants.REVIEW_URL}/{Id}");
        await base.OnParametersSetAsync();
    }

}
