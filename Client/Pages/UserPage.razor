@page "/user-page/{id}"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true"> @_loc["Your reviews"]</MudText>
    <MudGrid Spacing="6"  Class="mt-1" Justify="Justify.Center">
        @if(_reviews.Count == 0)
        {
            <MudItem Class="py-8" xs="12">
                <MudText Align="Align.Center">
                @_loc["You didn't publish reviews yet."]
                </MudText>
            </MudItem>
        
        }else{
            <MudItem xs="12">
                <MudTable MultiSelection="true" @bind-SelectedItems="@_selectedItems" FixedHeader="true" Height="60vh"
                Striped="true" Items="_reviews" T="ReviewModel" Filter="new Func<ReviewModel,bool>(FilterFunc)">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="@(_loc["Filter"])" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent >
                        <MudTh>
                            <MudTableSortLabel Class="fs-6 fw-bold" InitialDirection="SortDirection.Ascending" SortBy="new Func<ReviewModel, object>(r=>r.Title)">@_loc["Title"]</MudTableSortLabel>
                        </MudTh>
                        <MudHidden Breakpoint="Breakpoint.MdAndDown">
                            <MudTh>
                                <MudTableSortLabel Class="fs-6 fw-bold" SortBy="new Func<ReviewModel, object>(r=>r.Subject.Name)">@_loc["Subject"]</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel Class="fs-6 fw-bold" SortBy="new Func<ReviewModel, object>(r=>r.Likes.Count)">@_loc["Rating"]</MudTableSortLabel>
                            </MudTh>
                            <MudTh >
                                <MudTableSortLabel Class="fs-6 fw-bold" SortBy="new Func<ReviewModel, object>(r=>r.DateOfCreationInUTC)">@_loc["Date"]</MudTableSortLabel>
                            </MudTh>
                        </MudHidden>
                        <MudTh Class="fs-6 fw-bold">
                            @_loc["Modify"]
                        </MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="word-break: break-word" DataLabel="Tile">
                            <MudLink Href="@($"/review/{@context.Id}")" Typo="Typo.subtitle1">
                                @context.Title
                            </MudLink>
                        </MudTd>
                        <MudHidden Breakpoint="Breakpoint.MdAndDown">
                            <MudTd Style="word-break: break-word" DataLabel="Subject">
                                @context.Subject.Name
                            </MudTd>
                            <MudTd  DataLabel="Rating">@context.Likes.Count</MudTd>
                            <MudTd DataLabel="Date">@context.DateOfCreationInUTC.ToLocalTime().ToString("dd MMM yyy HH':'mm")</MudTd>
                        </MudHidden>
                        <MudTd DataLabel="Modify">
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="@(() => ModifyReview(context.Id))">
                                @_loc["Modify"]
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                @if(_selectedItems.Count > 0)
                {
                    <MudButton Disabled="_deleteButtonDisabled" Variant="Variant.Filled" Class="mt-4" OnClick="DeleteSelectedItems" Color="Color.Error">@_loc["Delete"]</MudButton>
                }
                else
                {
                    <MudButton Disabled="true" Variant="Variant.Filled" Class="mt-4"  Color="Color.Error">@_loc["Delete"]</MudButton>
                }
            </MudItem>        
        }
        <MudItem xs="12">
            <MudButton Variant="Variant.Outlined" OnClick="CreateReview" Color="Color.Info">@_loc["Create review"]</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string? Id { get; set; }
    [Inject]
    private HttpClient? _httpClient { get; set; }
    [Inject]
    private NavigationManager _nav { get; set; }
    [Inject]
    private AuthenticationStateProvider? _authenticationStateProvider { get; set; }
    [Inject]
    private IStringLocalizer<UserPage>? _loc { get; set; }
    private List<ReviewModel> _reviews = new();
    private HashSet<ReviewModel> _selectedItems = new();
    private string _userId;
    private string searchString = "";
    private bool _deleteButtonDisabled=false;

    protected async override Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider!.GetAuthenticationStateAsync();
        var user = authState.User;
        if(Id == "manage")
        {
            _userId = user.FindFirstValue("sub");
            if (_httpClient != null)
                _reviews = await _httpClient.GetFromJsonAsync<List<ReviewModel>>($"{Constants.REVIEWS_LIGHTWEIGHT_LIST_URL}?userId={_userId}");
        }
        else
        {
            if (!user.IsInRole("Admin"))
            {
                _nav.NavigateTo("/");
            }
            _userId = Id;
            if (_httpClient != null)
                _reviews = await _httpClient.GetFromJsonAsync<List<ReviewModel>>($"{Constants.REVIEWS_LIGHTWEIGHT_LIST_URL}?userId={_userId}");
        }
        await base.OnInitializedAsync();
    }

    private void ModifyReview(long reviewId)
    {
        _nav.NavigateTo($"create-review/{reviewId}");
    }

    private async Task DeleteSelectedItems()
    {
        if (_selectedItems.Count == 0)
            return;
        _deleteButtonDisabled = true;
        List<long> selectedIds = _selectedItems.Select(r => r.Id).ToList();
        string query = $"{Constants.REVIEWS_URL}?";
        foreach (var id in selectedIds)
        {
            query = $"{query}ids={id}&";
        }
        query = query.Remove(query.Length - 1);
        if(_httpClient != null)
            await _httpClient.DeleteAsync(query);
        _reviews = _reviews.Where(r => !selectedIds.Contains(r.Id)).ToList();
        _deleteButtonDisabled = false;
    }

    private bool FilterFunc(ReviewModel review)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (review.Title!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (review.Subject.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (review.DateOfCreationInUTC.ToString().Contains(searchString))
            return true;
        return false;
    }

    private void CreateReview()
    {
        _nav.NavigateTo($"create-review/asUser={_userId}");
    }
}
